{"version":3,"sources":["assets/twitter-logo.svg","App.js","index.js"],"names":["TWITTER_HANDLE","TWITTER_LINK","CONTRACT_ADDRESS","App","useState","currentAccount","setCurrentAccount","checkIfWalletIsConnected","a","window","ethereum","console","log","request","method","accounts","length","account","setupEventListener","connectWallet","alert","provider","ethers","providers","Web3Provider","signer","getSigner","Contract","myEpicNft","abi","on","from","tokenId","toNumber","error","askContractToMintNft","connectedContract","makeAnEpicNFT","nftTxn","wait","hash","useEffect","className","onClick","alt","src","twitterLogo","href","target","rel","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"4ugEAAe,G,MAAA,IAA0B,0C,uBCOnCA,EAAiB,cACjBC,EAAY,8BAA0BD,GAItCE,EAAmB,6CA6HVC,EA3HH,WACV,MAA4CC,mBAAS,IAArD,mBAAOC,EAAP,KAAuBC,EAAvB,KACMC,EAAwB,uCAAG,kCAAAC,EAAA,2DACZC,OAAZC,EADwB,EACxBA,SADwB,uBAG7BC,QAAQC,IAAI,gCAHiB,0BAM7BD,QAAQC,IAAI,8BAA+BF,GANd,uBASRA,EAASG,QAAQ,CAACC,OAAQ,iBATlB,OAUR,KADjBC,EATyB,QAUnBC,QACJC,EAAUF,EAAS,GACzBJ,QAAQC,IAAI,+BAAgCK,GAC5CC,KAEAP,QAAQC,IAAI,+BAfiB,4CAAH,qDAmBxBO,EAAa,uCAAG,gCAAAX,EAAA,oEAECC,OAAZC,EAFW,EAEXA,SAFW,uBAIhBU,MAAM,iBAJU,0CAQKV,EAASG,QAAQ,CAACC,OAAQ,wBAR/B,OAQZC,EARY,OASlBJ,QAAQC,IAAI,YAAaG,EAAS,IAClCT,EAAkBS,EAAS,IAC3BG,IAXkB,kDAalBP,QAAQC,IAAR,MAbkB,0DAAH,qDAiBbM,EAAkB,uCAAG,kCAAAV,EAAA,sDACzB,IAAK,EACgBC,QAAZC,EADL,EACKA,YAECW,EAAW,IAAIC,IAAOC,UAAUC,aAAad,GAC7Ce,EAASJ,EAASK,YACE,IAAIJ,IAAOK,SAASzB,EAAkB0B,EAAUC,IAAKJ,GAE7DK,GAAG,oBAAoB,SAACC,EAAMC,GAC9CrB,QAAQC,IAAImB,EAAMC,EAAQC,YAC1Bb,MAAM,sLAAD,OAAuLlB,EAAvL,YAA2M8B,EAAQC,gBAG1NtB,QAAQC,IAAI,0BAEd,MAAOsB,GACPvB,QAAQC,IAAIsB,GAhBW,2CAAH,qDAoBlBC,EAAoB,uCAAG,sCAAA3B,EAAA,oEAGNC,SAAZC,EAHkB,EAGlBA,UAHkB,wBAKjBW,EAAW,IAAIC,IAAOC,UAAUC,aAAad,GAC7Ce,EAASJ,EAASK,YAClBU,EAAoB,IAAId,IAAOK,SAASzB,EAAkB0B,EAAUC,IAAKJ,GAE/Ed,QAAQC,IAAI,0CATW,SAUJwB,EAAkBC,gBAVd,cAUnBC,EAVmB,OAYvB3B,QAAQC,IAAI,yBAZW,UAajB0B,EAAOC,OAbU,QAevB5B,QAAQC,IAAR,kEAAuE0B,EAAOE,OAfvD,wBAiBvB7B,QAAQC,IAAI,mCAjBW,0DAoBzBD,QAAQC,IAAR,MApByB,0DAAH,qDAwC1B,OAJA6B,qBAAU,WACRlC,MACC,IAGD,qBAAKmC,UAAU,MAAf,SACE,sBAAKA,UAAU,YAAf,UACE,sBAAKA,UAAU,mBAAf,UACE,mBAAGA,UAAU,uBAAb,+BACA,mBAAGA,UAAU,WAAb,mEAGA,mBAAGA,UAAU,WAAb,SAAyBrC,IACL,KAAnBA,EAxBP,wBAAQsC,QAASxB,EAAeuB,UAAU,mCAA1C,+BAMA,wBAAQC,QAASR,EAAsBO,UAAU,mCAAjD,yBAoBI,sBAAKA,UAAU,mBAAf,UACE,qBAAKE,IAAI,eAAeF,UAAU,eAAeG,IAAKC,IACtD,mBACEJ,UAAU,cACVK,KAAM9C,EACN+C,OAAO,SACPC,IAAI,aAJN,6BAKejD,cC7HzBkD,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.502c4b94.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/twitter-logo.a8a75254.svg\";","import './styles/App.css';\nimport twitterLogo from './assets/twitter-logo.svg';\nimport React, {useEffect,useState} from \"react\";\nimport { ethers } from 'ethers';\nimport myEpicNft from './utils/MyEpicNFT.json';\n\n// Constants\nconst TWITTER_HANDLE = '_buildspace';\nconst TWITTER_LINK = `https://twitter.com/${TWITTER_HANDLE}`;\n// const OPENSEA_LINK = '';\n// const TOTAL_MINT_COUNT = 50;\n\nconst CONTRACT_ADDRESS = \"0xc2ac962f802Bfb26409a05120299B93dAc32035A\";\n\nconst App = () => {\n  const [currentAccount, setCurrentAccount] = useState(\"\");\n  const checkIfWalletIsConnected = async () => {\n    const {ethereum} = window;\n    if(!ethereum) {\n      console.log(\"Make sure you have metamask!\");\n      return;\n    } else {\n      console.log(\"We have the ethereum object\", ethereum);\n    }\n\n    const accounts = await ethereum.request({method: 'eth_accounts'});\n    if(accounts.length !== 0) {\n      const account = accounts[0];\n      console.log(\"Found an authorized account:\", account);\n      setupEventListener()\n    } else {\n      console.log(\"No authorized account found\");\n    }\n  }\n\n  const connectWallet = async () => {\n    try {\n      const {ethereum} = window;\n      if(!ethereum) {\n        alert(\"Get MetaMask!\")\n        return\n      }\n\n      const accounts = await ethereum.request({method: \"eth_requestAccounts\"});\n      console.log(\"Connected\", accounts[0])\n      setCurrentAccount(accounts[0])\n      setupEventListener()\n    } catch (error) {\n      console.log(error)\n    }\n  }\n\n  const setupEventListener = async () => {\n    try {\n      const {ethereum} = window\n      if(ethereum) {\n        const provider = new ethers.providers.Web3Provider(ethereum)\n        const signer = provider.getSigner()\n        const connectedContract = new ethers.Contract(CONTRACT_ADDRESS, myEpicNft.abi, signer)\n\n        connectedContract.on(\"NewEpicNFTMinted\", (from, tokenId) => {\n          console.log(from, tokenId.toNumber())\n          alert(`Hey there! We've minted your NFT and sent it to your wallet. It may be blank right now. It will take a few minutes to show up. Here's the link: https://testnets.opensea.io/assets/${CONTRACT_ADDRESS}/${tokenId.toNumber()}`)\n        })\n\n        console.log(\"Setup event listener!\")\n      }\n    } catch (error) {\n      console.log(error)\n    }\n  }\n\n  const askContractToMintNft = async () => {\n\n    try {\n      const {ethereum} = window\n      if(ethereum) {\n        const provider = new ethers.providers.Web3Provider(ethereum)\n        const signer = provider.getSigner()\n        const connectedContract = new ethers.Contract(CONTRACT_ADDRESS, myEpicNft.abi, signer);\n\n        console.log(\"Going to pop wallet now to pay gas ...\")\n        let nftTxn = await connectedContract.makeAnEpicNFT();\n\n        console.log(\"Mining...please wait.\")\n        await nftTxn.wait();\n\n        console.log(`Mined, see transaction: https://rinkeby.etherscan.io/tx/${nftTxn.hash}`)\n      } else {\n        console.log(\"Ethereum object doesn't exists!\")\n      }\n    } catch (error) {\n      console.log(error)\n    }\n  }\n\n  const renderNotConnectedContainer = () => (\n    <button onClick={connectWallet} className=\"cta-button connect-wallet-button\">\n      Connect to Wallet\n    </button>\n  );\n\n  const renderMintUI = () => (\n    <button onClick={askContractToMintNft} className=\"cta-button connect-wallet-button\">\n      Mint NFT\n    </button>\n  )\n\n  useEffect(() => {\n    checkIfWalletIsConnected();\n  }, [])\n\n  return (\n    <div className=\"App\">\n      <div className=\"container\">\n        <div className=\"header-container\">\n          <p className=\"header gradient-text\">My NFT Collection</p>\n          <p className=\"sub-text\">\n            Each unique. Each beautiful. Discover your NFT today.\n          </p>\n          <p className=\"sub-text\">{currentAccount}</p>\n          {currentAccount === \"\" ? renderNotConnectedContainer() : renderMintUI()}\n        </div>\n        <div className=\"footer-container\">\n          <img alt=\"Twitter Logo\" className=\"twitter-logo\" src={twitterLogo} />\n          <a\n            className=\"footer-text\"\n            href={TWITTER_LINK}\n            target=\"_blank\"\n            rel=\"noreferrer\"\n          >{`built on @${TWITTER_HANDLE}`}</a>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}